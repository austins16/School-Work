package Cache_Sync;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.LayoutStyle.ComponentPlacement;

//import server.Server;

import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JSeparator;
import javax.swing.JRadioButton;
import javax.swing.SwingUtilities;

import java.awt.Color;
import java.awt.Font;

import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.swing.JList;
import javax.swing.ListSelectionModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

/**
 *
 * @author Austin, Everett, Larry
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
    	setTitle("test2");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldPort = new javax.swing.JTextField();
        jTextFieldIP = new javax.swing.JTextField();
        jButtonConnect = new javax.swing.JButton();
        jButtonConnect.setFont(new Font("Georgia", Font.PLAIN, 11));
        jButtonDisconnect = new javax.swing.JButton();
        jButtonDisconnect.setFont(new Font("Georgia", Font.PLAIN, 11));
        jButtonDisconnect.setEnabled(false);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jTextFieldPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPortActionPerformed(evt);
            }
        });

        jTextFieldIP.setText("127.0.0.1");

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jButtonDisconnect.setText("Disconnect");
        jButtonDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDisconnectActionPerformed(evt);
            }
        });
        jLabel1.setText("IP Address:");

        jLabel2.setText("Port:");
        
        lblInputText = new JLabel();
        lblInputText.setText("Input Text:");
        jTextAreaMessage = new javax.swing.JTextArea();
        
                jTextAreaMessage.setColumns(20);
                jTextAreaMessage.setRows(5);
        
        BrowsePath = new JTextField();
        
        JButton btnBrowse = new JButton();
        btnBrowse.setFont(new Font("Georgia", Font.PLAIN, 11));
        btnBrowse.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		JFileChooser chooser = new JFileChooser();
        		FileNameExtensionFilter filter = new FileNameExtensionFilter(
        				"Text files (.txt)", "txt");
        		chooser.setFileFilter(filter);
        		
        		int returnval = chooser.showOpenDialog(null);
        		//try{
        		 if (returnval != JFileChooser.APPROVE_OPTION) {
        		        System.out.println("I am returning null!");
        		        //System.exit(1);
        		 }
        		 else if(returnval == JFileChooser.APPROVE_OPTION)
        			{
        				File f1 = chooser.getSelectedFile();
        				
        				System.out.print(f1.getAbsolutePath());
        				
        				String temp = f1.getAbsolutePath();
        				// System.out.println(f1.
        				
        				setMessage("Creating trie, don't click anything...");
        				createTrie(f1); //?????!??!??
        				setMessage("Done creating trie!!!");
        				
        				
        				String filename=f1.getAbsolutePath();
                		BrowsePath.setText(filename);
        			}
        		
        		
        	
        	/*	catch ( IOException e1)
        		{
        			 System.out.println("Got a client !");
        		}
        		*/
        		//File f1 = chooser.getSelectedFile();
        		//client.createTrie(f1);
        		//String filename=f1.getAbsolutePath();
        		//BrowsePath.setText(filename);
        		
        		
        		//FileSelect filesel=new FileSelect();
               // filesel.setVisible(true);
               
        	}
        });
        btnBrowse.setText("Browse");
        
        btnSave = new JButton();
        btnSave.setFont(new Font("Georgia", Font.PLAIN, 11));
        btnSave.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		JFileChooser saver = new JFileChooser();
        		FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files (.txt)", "txt");
        		saver.setFileFilter(filter);
        		saver.setApproveButtonText("Save");
        		int returnsave = saver.showOpenDialog(null);
        		//String testing = "TESTING FOR NOW";
        		if(returnsave==JFileChooser.APPROVE_OPTION){
        			try {
						FileWriter fw = new FileWriter(saver.getSelectedFile()+".txt");
						
						trie.outputTrie(trie.root, fw, "");
						fw.flush();
						fw.close();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
        		}
        		File f1 = saver.getSelectedFile();
        		String filename=f1.getAbsolutePath();
        		BrowsePath.setText(filename);
        	}
        });
        btnSave.setEnabled(false);
        btnSave.setText("Save");
        
        SavePath = new JTextField();
        
        lblSyncedOutputText = new JLabel();
        lblSyncedOutputText.setText("Synced Text:");
        SearchField = new JTextField();
        SearchField.addKeyListener(new KeyAdapter() {
        	@Override
        	public void keyReleased(KeyEvent arg0) {
        		predictSearch(SearchField.getText());
        	}
        });
        
        btnSearch = new JButton();
        btnSearch.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		String searched = SearchField.getText();
        		setMessage(searched);
        		if(trie!= null)
        		{
        			trie.addPattern(searched, 1);
        		}
        		SearchField.setText("");
        		
        	}
        });
        btnSearch.setFont(new Font("Georgia", Font.PLAIN, 13));
        btnSearch.setText("Search");
        
        btnSync = new JButton();
        btnSync.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e){
        		btnSave.setEnabled(true);
        		send_size = 0;
        		receive_size = 0;
        		
        		// creating bloom filter here
        		setMessage("Syncing...");
        		
        		int trie_size = trie.num_words;
        		int new_trie_size = (trie_size/10000) * 10000;
        		
        		trie.bfilter = new byte[new_trie_size*16];
        		
        		//setMessage("Hashing trie...");
        		trie.hashTrie(trie.root, "");
        		//setMessage("Done hasing trie!!!");

        		String tochar = "";
        		try {
        			//setMessage("Compressing bloom filter...");
        			comp_filter = new byte[trie.bfilter.length/8];
        			for(int ii=0, jj=0; ii<trie.bfilter.length; ii++){
        				tochar += trie.bfilter[ii];
        				if((ii+1)%8==0){
        					int ascii_char = Integer.parseInt(tochar, 2);
        					if(jj<comp_filter.length)
        						comp_filter[jj] = (byte)ascii_char;
        					tochar = "";
        					jj++;
        				}
        				
        			}
        			//System.out.println("Sending bloom filter over socket...\n");
					DataOutputStream writer = new DataOutputStream(clientSocket.getOutputStream());
					writer.writeInt(comp_filter.length);
					writer.write(comp_filter);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
        		send_size = comp_filter.length;
        		setMessage("Size of data sent to server (in bytes): " + send_size);
        		
        		try {
        			//System.out.println("Reading the missing searches...\n");
					BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
					String testing;
					String word;
					int freq;
					while((testing=reader.readLine())!=null){
						String[] split = testing.split("\t");
						word = split[0];
						freq = Integer.parseInt(split[1]);
						trie.addPattern(word, freq);
						receive_size += testing.length();
						//setMessage(testing);
					}
					
					setMessage("Size of data received by the client (in bytes): " + receive_size);
					
				} catch (IOException e1) {
					e1.printStackTrace();
				}
        		
        		//trie.printTrie(trie.root, "");
        		setMessage("Done Syncing!!!!");
        		
        	}
        });
        btnSync.setFont(new Font("Georgia", Font.PLAIN, 14));
        btnSync.setText("Sync");
        
        HostPort = new JTextField();
        
        
        JButton btnHost = new JButton();
        btnHost.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e){
        		try {
        			setMessage("Attempting to connect to a client...");
                	ServerSocket s = new ServerSocket(Integer.parseInt(HostPort.getText()));
                	Socket connect = s.accept();
                	setMessage("Successfully connected to client!");
                	new Client(connect, GUI.this).start();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
        	}
        });
        
        btnHost.setFont(new Font("Georgia", Font.PLAIN, 11));
        btnHost.setText("Host");
        
        lblConnectToA = new JLabel();
        lblConnectToA.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblConnectToA.setText("Connect to a server:");
        
        lblHostToA = new JLabel();
        lblHostToA.setText("Host a server:");
        lblHostToA.setFont(new Font("Tahoma", Font.PLAIN, 14));
        
        separator = new JSeparator();
        
       
        JLabel lblDoYouMean = new JLabel();
        lblDoYouMean.setText("Do you mean:");
        
        AutoComplete = new JList();
        
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(88)
        					.addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, 315, Short.MAX_VALUE)
        					.addComponent(lblDoYouMean))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addContainerGap(10, Short.MAX_VALUE)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(separator, GroupLayout.PREFERRED_SIZE, 509, GroupLayout.PREFERRED_SIZE)
        						.addGroup(jPanel1Layout.createSequentialGroup()
        							.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(jPanel1Layout.createSequentialGroup()
        									.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(lblSyncedOutputText)
        										.addComponent(lblInputText, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(SavePath, 295, 295, 295)
        										.addComponent(BrowsePath, GroupLayout.PREFERRED_SIZE, 295, GroupLayout.PREFERRED_SIZE)))
        								.addGroup(jPanel1Layout.createSequentialGroup()
        									.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        										.addComponent(jLabel2)
        										.addComponent(jLabel1))
        									.addPreferredGap(ComponentPlacement.RELATED)
        									.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        										.addComponent(jTextFieldIP, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE)
        										.addComponent(jTextFieldPort, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE)
        										.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        											.addComponent(jButtonDisconnect)
        											.addComponent(lblConnectToA, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE))))
        								.addGroup(jPanel1Layout.createSequentialGroup()
        									.addGap(22)
        									.addComponent(jButtonConnect, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)))
        							.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(jPanel1Layout.createSequentialGroup()
        									.addGap(6)
        									.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        										.addComponent(btnSync, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)
        										.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        											.addComponent(HostPort, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE)
        											.addComponent(btnHost, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE))))
        								.addComponent(lblHostToA, GroupLayout.PREFERRED_SIZE, 158, GroupLayout.PREFERRED_SIZE))
        							.addGap(20))))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(89)
        					.addComponent(btnBrowse, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)))
        			.addGap(10)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        					.addComponent(jTextAreaMessage, GroupLayout.PREFERRED_SIZE, 483, GroupLayout.PREFERRED_SIZE)
        					.addGroup(jPanel1Layout.createSequentialGroup()
        						.addComponent(SearchField, 384, 384, 384)
        						.addGap(18)
        						.addComponent(btnSearch, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)))
        				.addComponent(AutoComplete, GroupLayout.PREFERRED_SIZE, 384, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jTextAreaMessage, GroupLayout.PREFERRED_SIZE, 273, GroupLayout.PREFERRED_SIZE)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(19)
        					.addComponent(lblConnectToA)
        					.addGap(18)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(lblHostToA, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jLabel1)
        						.addComponent(jTextFieldIP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(HostPort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jLabel2)
        						.addComponent(jTextFieldPort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        					.addGap(18)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(btnHost)
        						.addComponent(jButtonConnect)
        						.addComponent(jButtonDisconnect))
        					.addGap(28)
        					.addComponent(separator, GroupLayout.PREFERRED_SIZE, 2, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(BrowsePath, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(lblInputText)
        						.addComponent(btnSync, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(btnBrowse)))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(SavePath, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(lblSyncedOutputText))
        					.addGap(18)
        					.addComponent(btnSave))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(btnSearch, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
        						.addComponent(SearchField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(lblDoYouMean)
        						.addComponent(AutoComplete, GroupLayout.PREFERRED_SIZE, 99, GroupLayout.PREFERRED_SIZE))))
        			.addGap(77))
        );
        jPanel1.setLayout(jPanel1Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 427, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(62, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPortActionPerformed
    
    void setMessage(String s) {
    	SwingUtilities.invokeLater(new Runnable() {
    	
	    	@Override
	    	public void run() {
	    		jTextAreaMessage.append(s +"\n");
	    	}
    	});
    	/*
    	 if(jTextAreaMessage.getLineCount()>=15)
         {
         	int end;
			try {
				end = jTextAreaMessage.getLineEndOffset(0);
				jTextAreaMessage.replaceRange("", 0, end);
			} catch (BadLocationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
         			
         }
        jTextAreaMessage.append(s+ "\n");
     */
    }
    
    public void populateList(String[] searches)
    {
    	DefaultListModel DLM = new DefaultListModel();
    	for(int i =0; i<searches.length; i++)
    	{
    		DLM.addElement(searches[i]);
    	}
    	AutoComplete.setModel(DLM);
    }
    
    public void createTrie(File filename)
    {
    	//String f2;
    	try {
			trie = new Trie();
			trie.createTrie(filename);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.err.println("?????????????????????????");
		}
    }
    
    
    public void predictSearch(String search)
    {
    	if(trie!=null)
    	{
        	List<String> strlist = new ArrayList<String>(trie.predictQuery(search));
        	populateList(strlist.toArray(new String[strlist.size()]));
    	}else{
    		System.out.println("Error with trie");
    	}
    }
    
    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        // TODO add your handling code here:
          jButtonConnect.setEnabled(false);
          jButtonDisconnect.setEnabled(true);
          //client = new Client (jTextFieldIP.getText(),Integer.parseInt(jTextFieldPort.getText()), GUI.this);
        try { 
        	String hostname = jTextFieldIP.getText();
        	int port = Integer.parseInt(jTextFieldPort.getText());
        	setMessage("Attempting to connect to " + hostname + ":" + port);
        	clientSocket = new Socket(hostname, port);
        	setMessage("Connection Established");
            //trying to establish connection to the server
            //client.connect();
            //if successful, read response from server
            //client.readResponse();
        	String userInput;
            BufferedReader stdIn = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            
            setMessage("Response from server:");
            userInput = stdIn.readLine();
            setMessage(userInput);
        	
        } catch (UnknownHostException e) {
            System.err.println("Host unknown. Cannot establish connection");
        } catch (IOException e) {
            System.err.println("Cannot establish connection. Server may not be up."+e.getMessage());
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed
    
    private void jButtonDisconnectActionPerformed(java.awt.event.ActionEvent evt) {
    	jButtonConnect.setEnabled(true);
        jButtonDisconnect.setEnabled(false);
    	try{
    		if(clientSocket!= null)
        	{
        		setMessage("Disconnecting from Server");
        		clientSocket.close();
        	}
    	}catch (UnknownHostException e) {
            System.err.println("Host unknown. Cannot Disconnect");
        } catch (IOException e) {
            System.err.println("Cannot Disconnect."+e.getMessage());
        }
    	
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonDisconnect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea jTextAreaMessage;
    private javax.swing.JTextField jTextFieldIP;
    private javax.swing.JTextField jTextFieldPort;
    // End of variables declaration//GEN-END:variables
    	Client server;
        Client client;
        Socket clientSocket;
        Trie trie;
        int send_size;
        int receive_size;
        byte[] comp_filter;
        private JLabel lblInputText;
        private JTextField BrowsePath;
        private JButton btnSave;
        private JTextField SavePath;
        private JLabel lblSyncedOutputText;
        private JTextField SearchField;
        private JButton btnSearch;
        private JButton btnSync;
        private final ButtonGroup buttonGroup = new ButtonGroup();
      //  private JList AutoCompList;
        private JTextField HostPort;
        private JLabel lblConnectToA;
        private JLabel lblHostToA;
        private JSeparator separator;
        private JList AutoComplete;
        private int maxtext;
       // ?? private JFileChooser chooser;
}
